#!/usr/bin/env python3
import os
import json
import time
import threading
import logging
import yaml

import cv2
import numpy as np
from aiohttp import web
from aiortc import (
    RTCPeerConnection,
    RTCSessionDescription,
    VideoStreamTrack,
    RTCIceCandidate
)

# ─────────── Logging ───────────
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger("rtsp-aiortc-opt")

# ─────────── Load config.yaml ───────────
THIS_DIR  = os.path.dirname(__file__)
with open(os.path.join(THIS_DIR, "config.yaml")) as f:
    cfg = yaml.safe_load(f)

RTSP_URL = cfg["camera"]["rtsp_url"]
CSV_LOG  = cfg.get("log_behavior", {}).get("csv_path", "")

logger.info(f"RTSP URL  : {RTSP_URL}")
logger.info(f"CSV Log   : {CSV_LOG} (stub)")

# ─────────── Shared LatestFrame buffer ───────────
class LatestFrame:
    lock  = threading.Lock()
    frame = None

    @classmethod
    def update(cls, img):
        with cls.lock:
            cls.frame = img

    @classmethod
    def get(cls):
        with cls.lock:
            return None if cls.frame is None else cls.frame.copy()

# ─────────── RTSP Capture Thread ───────────
TARGET_FPS   = 15
CAPTURE_URL  = RTSP_URL

def rtsp_capture_loop():
    """ Continuously pull frames from RTSP into LatestFrame """
    cap = cv2.VideoCapture(CAPTURE_URL, cv2.CAP_FFMPEG)
    if not cap.isOpened():
        logger.error("Cannot open RTSP: %s", CAPTURE_URL)
        return

    interval = 1.0 / TARGET_FPS
    while True:
        ret, frame = cap.read()
        if not ret:
            logger.warning("RTSP read failed, retrying in 1s")
            cap.release()
            time.sleep(1)
            cap = cv2.VideoCapture(CAPTURE_URL, cv2.CAP_FFMPEG)
            continue
        # resize if desired, e.g. to 640×360 to reduce bandwidth
        # frame = cv2.resize(frame, (640, 360))
        LatestFrame.update(frame)
        time.sleep(interval)

# ─────────── WebRTC / aiortc ───────────
pcs = set()

class BufferedRTSPTrack(VideoStreamTrack):
    """ Serves the latest frame from LatestFrame at TARGET_FPS """
    def __init__(self):
        super().__init__()
        self._start = time.time()
        self._frames = 0

    async def recv(self):
        # throttle to TARGET_FPS
        pts, time_base = await self.next_timestamp()
        frame = LatestFrame.get()
        if frame is None:
            # black fallback
            frame = np.zeros((480, 640, 3), dtype=np.uint8)
        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        video_frame = VideoFrame.from_ndarray(rgb, format="rgb24")
        video_frame.pts        = pts
        video_frame.time_base  = time_base
        return video_frame

# ─────────── HTTP Routes ───────────
routes = web.RouteTableDef()

@routes.post("/stream/offer")
async def handle_offer(req):
    data = await req.json()
    offer = data.get("offer", data)
    logger.info("Received /stream/offer")

    pc = RTCPeerConnection()
    pcs.add(pc)

    @pc.on("connectionstatechange")
    async def on_state_change():
        logger.info("Connection state → %s", pc.connectionState)
        if pc.connectionState in ("failed", "closed"):
            await pc.close()
            pcs.discard(pc)

    # Add our buffered RTSP track
    pc.addTrack(BufferedRTSPTrack())

    # set remote
    await pc.setRemoteDescription(
        RTCSessionDescription(offer["sdp"], offer["type"])
    )

    # create answer
    answer = await pc.createAnswer()
    await pc.setLocalDescription(answer)

    logger.info("Sending SDP answer")
    return web.json_response({
        "sdp": pc.localDescription.sdp,
        "type": pc.localDescription.type
    })

@routes.post("/stream/ice-candidate")
async def handle_ice(req):
    data = await req.json()
    cand = data.get("candidate", data)
    logger.info("Received ICE candidate: %s", cand)

    pc = next(iter(pcs), None)
    if pc:
        # pass full dict so sdpMid/sdpMLineIndex are included
        await pc.addIceCandidate(
            RTCIceCandidate(
                candidate=cand["candidate"],
                sdpMid=cand.get("sdpMid"),
                sdpMLineIndex=cand.get("sdpMLineIndex")
            )
        )
    return web.json_response({"success": True})

@routes.post("/stream/stop")
async def handle_stop(req):
    logger.info("Received /stream/stop, closing PCs")
    for pc in list(pcs):
        await pc.close()
    pcs.clear()
    return web.json_response({"success": True})

@routes.get("/stream/status")
async def handle_status(req):
    pc = next(iter(pcs), None)
    state = pc.connectionState if pc else "closed"
    logger.info("Received /stream/status → %s", state)
    return web.json_response({"status": state})

@routes.get("/log")
async def handle_log(req):
    logger.debug("Received /log → []")
    return web.json_response([])

# ─────────── Main ───────────
def main():
    # 1) Start RTSP capture thread
    threading.Thread(target=rtsp_capture_loop, daemon=True).start()
    logger.info("RTSP capture thread started at %d FPS", TARGET_FPS)

    # 2) HTTP & WebRTC
    app = web.Application()
    app.add_routes(routes)
    logger.info("HTTP server listening on 0.0.0.0:8000")
    web.run_app(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    main()
